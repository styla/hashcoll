/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_hashset_free(a: number): void;
export function hashset_with_capacity(a: number): number;
export function hashset_remove(a: number, b: number, c: number): number;
export function hashset_insert(a: number, b: number, c: number): number;
export function hashset_contains(a: number, b: number, c: number): number;
export function hashset_get(a: number, b: number, c: number, d: number): void;
export function hashset_clear(a: number): void;
export function __wbg_hashsetraw_free(a: number): void;
export function hashsetraw_with_capacity(a: number): number;
export function hashsetraw_remove(a: number, b: number, c: number): number;
export function hashsetraw_insert(a: number, b: number, c: number): number;
export function hashsetraw_contains(a: number, b: number, c: number): number;
export function hashsetraw_get(a: number, b: number, c: number, d: number): void;
export function hashsetraw_clear(a: number): void;
export function __wbg_hashmap_free(a: number): void;
export function hashmap_new(): number;
export function hashmap_with_capacity(a: number): number;
export function hashmap_remove(a: number, b: number, c: number, d: number): void;
export function hashmap_insert(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function hashmap_contains(a: number, b: number, c: number): number;
export function hashmap_get(a: number, b: number, c: number, d: number): void;
export function hashmap_len(a: number): number;
export function hashmap_is_empty(a: number): number;
export function hashmap_clear(a: number): void;
export function hashmap_capacity(a: number): number;
export function __wbg_hashmapraw_free(a: number): void;
export function hashmapraw_with_capacity(a: number): number;
export function hashmapraw_remove(a: number, b: number, c: number, d: number): void;
export function hashmapraw_insert(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function hashmapraw_contains(a: number, b: number, c: number): number;
export function hashmapraw_get(a: number, b: number, c: number, d: number): void;
export function hashmapraw_clear(a: number): void;
export function hashsetraw_capacity(a: number): number;
export function hashset_capacity(a: number): number;
export function hashmapraw_capacity(a: number): number;
export function hashsetraw_is_empty(a: number): number;
export function hashset_is_empty(a: number): number;
export function hashmapraw_is_empty(a: number): number;
export function hashsetraw_new(): number;
export function hashset_new(): number;
export function hashmapraw_new(): number;
export function hashsetraw_len(a: number): number;
export function hashset_len(a: number): number;
export function hashmapraw_len(a: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_free(a: number, b: number): void;
